# Requirement: Service Orchestration
# Location: System Design/Deployment Architecture/Containerization
# Description: Supports local development and testing by orchestrating frontend services and their dependencies using Docker Compose.
version: '3.8'

services:
  # Frontend web application service
  frontend:
    # Requirement: Frontend Framework and Libraries
    # Location: Technical Specification/6. TECHNOLOGY STACK/Frontend Libraries
    # Description: Ensures that the frontend application is containerized and orchestrated for consistent deployment and testing.
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./public:/app/public
      - ./node_modules:/app/node_modules
    environment:
      # Requirement: Environment-Specific Configuration
      # Location: Technical Specification/6. TECHNOLOGY STACK/Development & Deployment
      # Description: Supports environment-specific configurations for development, staging, and production environments.
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:3000
      - NEXT_PUBLIC_STRIPE_API_KEY=pk_test_12345
    depends_on:
      - backend
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Backend API service (imported from backend docker-compose.yml)
  backend:
    extends:
      file: ../backend/docker-compose.yml
      service: backend
    networks:
      - app-network

  # Database service (imported from backend docker-compose.yml)
  db:
    extends:
      file: ../backend/docker-compose.yml
      service: db
    networks:
      - app-network

  # Redis service (imported from backend docker-compose.yml)
  redis:
    extends:
      file: ../backend/docker-compose.yml
      service: redis
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data: