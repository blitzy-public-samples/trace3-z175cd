# Docker Compose configuration for Substack Replica backend services
# Version: 20.10.x

# Requirements Addressed:
# - Service Orchestration (System Design/Deployment Architecture/Containerization):
#   Supports local development and testing by orchestrating backend services and their dependencies.
# - Database Configuration (Technical Specification/Data Storage/Primary Database):
#   Ensures PostgreSQL database is properly configured and accessible.
# - Caching and Session Management (Technical Specification/Data Storage/Cache):
#   Integrates Redis for caching and session management.
# - Email Delivery (Technical Specification/Cross-Cutting Concerns/Email):
#   Configures email delivery services for local testing.
# - Storage Configuration (Technical Specification/System Architecture/Cloud Services):
#   Defines storage services for media and file management.

version: '3.8'

services:
  # Backend API service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./src:/app/src
      - ./node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://user:password@db:5432/app
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=${SMTP_HOST:-smtp.example.com}
      - SMTP_PORT=${SMTP_PORT:-587}
      - SMTP_USER=${SMTP_USER:-example@example.com}
      - SMTP_PASS=${SMTP_PASS:-password}
      - SMTP_SECURE=${SMTP_SECURE:-false}
      - EMAIL_FROM=${EMAIL_FROM:-no-reply@example.com}
      - AWS_S3_BUCKET=${STORAGE_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - JWT_SECRET=${JWT_SECRET:-development_secret}
      - JWT_EXPIRATION=${JWT_EXPIRATION:-1h}
      - STRIPE_API_KEY=${STRIPE_API_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
    depends_on:
      - db
      - redis
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database service
  db:
    image: postgres:15
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=app
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d app"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Redis cache service
  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - backend-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

networks:
  backend-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local