# Requirements Addressed:
# - Continuous Integration Pipeline (Technical Specification/Development & Deployment/CI/CD Pipeline)
#   Automates the processes of building, testing, linting, and validating the codebase.
# - Code Quality and Standards (Technical Specification/System Design/Cross-Cutting Concerns/Code Quality)
#   Ensures consistent coding standards and identifies potential issues using linting and testing tools.

name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'
  CACHE_KEY: 'node-modules-cache'

jobs:
  backend:
    name: Backend CI
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_database
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:6
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/backend/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/backend/node_modules
          key: ${{ env.CACHE_KEY }}-backend-${{ hashFiles('src/backend/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY }}-backend-

      - name: Install dependencies
        working-directory: src/backend
        run: npm ci

      - name: Run linting
        working-directory: src/backend
        run: npm run lint

      - name: Run tests
        working-directory: src/backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_database
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test
        run: npm test

  frontend:
    name: Frontend CI
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/web/package-lock.json

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: src/web/node_modules
          key: ${{ env.CACHE_KEY }}-frontend-${{ hashFiles('src/web/package-lock.json') }}
          restore-keys: |
            ${{ env.CACHE_KEY }}-frontend-

      - name: Install dependencies
        working-directory: src/web
        run: npm ci

      - name: Run linting
        working-directory: src/web
        run: npm run lint

      - name: Run tests
        working-directory: src/web
        env:
          NODE_ENV: test
        run: npm test

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --all-projects

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [backend, frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build backend
        working-directory: src/backend
        run: |
          npm ci
          npm run build

      - name: Build frontend
        working-directory: src/web
        run: |
          npm ci
          npm run build

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [security, build]
    if: always()

    steps:
      - name: Check build status
        if: ${{ needs.build.result != 'success' }}
        run: exit 1

      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: '#FF0000'
          SLACK_MESSAGE: 'CI pipeline failed! Please check the logs.'
          SLACK_TITLE: CI Pipeline Status